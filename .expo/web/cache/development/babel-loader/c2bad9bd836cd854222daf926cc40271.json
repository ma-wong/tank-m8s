{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/morganwong/my-projects/tank-m8s/components/AutoCompInput/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport Autocomplete from 'react-native-autocomplete-input';\nimport React, { FC, useEffect, useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\n\nvar AutoCompInput = function AutoCompInput() {\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      allMovies = _useState2[0],\n      setAllMovies = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      query = _useState4[0],\n      setQuery = _useState4[1];\n\n  var movieList = [{\n    id: 1,\n    name: 'hammy'\n  }, {\n    id: 2,\n    name: 'angel'\n  }, {\n    id: 3,\n    name: 'dicks'\n  }];\n  useEffect(function () {\n    setAllMovies(movieList);\n  }, []);\n  return React.createElement(View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.autocompleteContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, React.createElement(Autocomplete, {\n    data: allMovies,\n    value: query,\n    onChangeText: setQuery,\n    flatListProps: {\n      keyExtractor: function keyExtractor(_, idx) {\n        return idx;\n      },\n      renderItem: function renderItem(_ref) {\n        var allMovies = _ref.allMovies;\n        return React.createElement(Text, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 44\n          }\n        }, allMovies.name);\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  })));\n};\n\nvar styles = StyleSheet.create({\n  container: _objectSpread({\n    position: 'relative',\n    backgroundColor: '#F5FCFF',\n    flex: 1,\n    paddingTop: 50\n  }, Platform.select({\n    web: {\n      marginTop: 0\n    },\n    default: {\n      marginTop: 25\n    }\n  })),\n  itemText: {\n    fontSize: 15,\n    margin: 2\n  },\n  descriptionContainer: {\n    backgroundColor: '#F5FCFF',\n    marginTop: 8\n  },\n  infoText: {\n    textAlign: 'center'\n  },\n  autocompleteContainer: {\n    flex: 1,\n    left: 0,\n    position: 'absolute',\n    right: 0,\n    top: 0,\n    zIndex: 1,\n    padding: 5\n  }\n});\nexport default AutoCompInput;","map":{"version":3,"sources":["/Users/morganwong/my-projects/tank-m8s/components/AutoCompInput/index.js"],"names":["Autocomplete","React","FC","useEffect","useState","AutoCompInput","allMovies","setAllMovies","query","setQuery","movieList","id","name","styles","container","autocompleteContainer","keyExtractor","_","idx","renderItem","StyleSheet","create","position","backgroundColor","flex","paddingTop","Platform","select","web","marginTop","default","itemText","fontSize","margin","descriptionContainer","infoText","textAlign","left","right","top","zIndex","padding"],"mappings":";;;;;;;;;;AAAA,OAAOA,YAAP,MAAyB,iCAAzB;AACA,OAAOC,KAAP,IAAgBC,EAAhB,EAAoBC,SAApB,EAA+BC,QAA/B,QAA+C,OAA/C;;;;;;;AAYA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1B,kBAAkCD,QAAQ,EAA1C;AAAA;AAAA,MAAOE,SAAP;AAAA,MAAkBC,YAAlB;;AACA,mBAA0BH,QAAQ,CAAC,EAAD,CAAlC;AAAA;AAAA,MAAOI,KAAP;AAAA,MAAcC,QAAd;;AAUE,MAAMC,SAAS,GAAG,CAAC;AAACC,IAAAA,EAAE,EAAC,CAAJ;AAAOC,IAAAA,IAAI,EAAC;AAAZ,GAAD,EAAuB;AAACD,IAAAA,EAAE,EAAE,CAAL;AAAQC,IAAAA,IAAI,EAAC;AAAb,GAAvB,EAA8C;AAACD,IAAAA,EAAE,EAAE,CAAL;AAAQC,IAAAA,IAAI,EAAC;AAAb,GAA9C,CAAlB;AACAT,EAAAA,SAAS,CAAC,YAAM;AAEZI,IAAAA,YAAY,CAACG,SAAD,CAAZ;AACH,GAHQ,EAGN,EAHM,CAAT;AAKF,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEG,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAED,MAAM,CAACE,qBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,YAAD;AAGE,IAAA,IAAI,EAAET,SAHR;AAIE,IAAA,KAAK,EAAEE,KAJT;AAKE,IAAA,YAAY,EAAEC,QALhB;AAOE,IAAA,aAAa,EAAE;AAQbO,MAAAA,YAAY,EAAE,sBAACC,CAAD,EAAIC,GAAJ;AAAA,eAAYA,GAAZ;AAAA,OARD;AASbC,MAAAA,UAAU,EAAE;AAAA,YAAGb,SAAH,QAAGA,SAAH;AAAA,eAAmB,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAOA,SAAS,CAACM,IAAjB,CAAnB;AAAA;AATC,KAPjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF;AA2BD,CA7CD;;AA+CA,IAAMC,MAAM,GAAGO,UAAU,CAACC,MAAX,CAAkB;AAC/BP,EAAAA,SAAS;AACPQ,IAAAA,QAAQ,EAAE,UADH;AAEPC,IAAAA,eAAe,EAAE,SAFV;AAGPC,IAAAA,IAAI,EAAE,CAHC;AAOPC,IAAAA,UAAU,EAAE;AAPL,KAUJC,QAAQ,CAACC,MAAT,CAAgB;AACjBC,IAAAA,GAAG,EAAE;AACHC,MAAAA,SAAS,EAAE;AADR,KADY;AAIjBC,IAAAA,OAAO,EAAE;AACPD,MAAAA,SAAS,EAAE;AADJ;AAJQ,GAAhB,CAVI,CADsB;AAoB/BE,EAAAA,QAAQ,EAAE;AACRC,IAAAA,QAAQ,EAAE,EADF;AAERC,IAAAA,MAAM,EAAE;AAFA,GApBqB;AAwB/BC,EAAAA,oBAAoB,EAAE;AAGpBX,IAAAA,eAAe,EAAE,SAHG;AAIpBM,IAAAA,SAAS,EAAE;AAJS,GAxBS;AA8B/BM,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,EAAE;AADH,GA9BqB;AAiC/BrB,EAAAA,qBAAqB,EAAE;AAGrBS,IAAAA,IAAI,EAAE,CAHe;AAIrBa,IAAAA,IAAI,EAAE,CAJe;AAKrBf,IAAAA,QAAQ,EAAE,UALW;AAMrBgB,IAAAA,KAAK,EAAE,CANc;AAOrBC,IAAAA,GAAG,EAAE,CAPgB;AAQrBC,IAAAA,MAAM,EAAE,CARa;AASrBC,IAAAA,OAAO,EAAE;AATY;AAjCQ,CAAlB,CAAf;AA8CA,eAAepC,aAAf","sourcesContent":["import Autocomplete from 'react-native-autocomplete-input';\nimport React, { FC, useEffect, useState } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  TouchableOpacity,\n  View,\n  Platform,\n} from 'react-native';\n\n// import { SWAPI, Movies, Movie} from './swapi';\n// import { MovieDetails } from './MovieDetails';\n\nconst AutoCompInput = () => {\n  const [allMovies, setAllMovies] = useState();\n  const [query, setQuery] = useState('');\n\n\n\n//   useEffect(() => {\n//     (async function fetchMovies() {\n//       setAllMovies(await SWAPI.fetchMovies());\n//     })();\n//   }, []);\n\n    const movieList = [{id:1, name:'hammy'}, {id: 2, name:'angel'}, {id: 3, name:'dicks'}]\n    useEffect(() => {\n        \n        setAllMovies(movieList);\n    }, []);\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.autocompleteContainer}>\n        <Autocomplete\n          \n          \n          data={allMovies}\n          value={query}\n          onChangeText={setQuery}\n          \n          flatListProps={{\n            // keyboardShouldPersistTaps: 'always',\n            // keyExtractor: ({allMovies}) => {allMovies},\n            // renderItem: ({ item: { name } } : {MovieList}) => (\n            //   <TouchableOpacity onPress={() => setQuery(title)}>\n            //     <Text style={styles.itemText}>{title}</Text>\n            //   </TouchableOpacity>\n            // ),\n            keyExtractor: (_, idx) => idx,\n            renderItem: ({ allMovies }) => <Text>{allMovies.name}</Text>,\n          }}\n        />\n      </View>\n\n  \n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'relative',\n    backgroundColor: '#F5FCFF',\n    flex: 1,\n\n    // Android requiers padding to avoid overlapping\n    // with content and autocomplete\n    paddingTop: 50,\n\n    // Make space for the default top bar\n    ...Platform.select({\n      web: {\n        marginTop: 0,\n      },\n      default: {\n        marginTop: 25,\n      },\n    }),\n  },\n  itemText: {\n    fontSize: 15,\n    margin: 2,\n  },\n  descriptionContainer: {\n    // `backgroundColor` needs to be set otherwise the\n    // autocomplete input will disappear on text input.\n    backgroundColor: '#F5FCFF',\n    marginTop: 8,\n  },\n  infoText: {\n    textAlign: 'center',\n  },\n  autocompleteContainer: {\n    // Hack required to make the autocomplete\n    // work on Andrdoid\n    flex: 1,\n    left: 0,\n    position: 'absolute',\n    right: 0,\n    top: 0,\n    zIndex: 1,\n    padding: 5,\n  },\n});\n\nexport default AutoCompInput;"]},"metadata":{},"sourceType":"module"}