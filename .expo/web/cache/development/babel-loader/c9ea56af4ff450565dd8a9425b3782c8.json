{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/morganwong/my-projects/tank-m8s/screens/AddTankMate.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport CheckBox from \"react-native-web/dist/exports/CheckBox\";\nimport { Button, LinearProgress } from 'react-native-elements';\nimport Dropdown from \"../components/Dropdown\";\nimport UserInput from \"../components/UserInput\";\nimport AddReminder from \"../components/AddReminder\";\nimport Bttn from \"../components/Bttn\";\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'gray',\n    justifyContent: 'center',\n    marginVertical: 20,\n    flexDirection: \"column\"\n  },\n  scrollView: {\n    marginHorizontal: 20,\n    backgroundColor: \"pink\",\n    flex: 1\n  },\n  button: {\n    backgroundColor: \"black\",\n    padding: 20,\n    borderRadius: 10,\n    marginTop: \"1rem\",\n    width: 100\n  },\n  checkboxContainer: {\n    flexDirection: \"row\",\n    marginBottom: 20\n  },\n  checkbox: {\n    alignSelf: \"center\"\n  },\n  label: {\n    margin: 8\n  },\n  view: {\n    flex: 1,\n    alignItems: \"center\"\n  }\n});\n\nvar AddTankMate = function (_Component) {\n  _inherits(AddTankMate, _Component);\n\n  var _super = _createSuper(AddTankMate);\n\n  function AddTankMate(props) {\n    var _this;\n\n    _classCallCheck(this, AddTankMate);\n\n    _this = _super.call(this, props);\n\n    _this.setSelectedTank = function (itemValue, itemIndex) {\n      _this.setState({\n        selectedTank: itemValue\n      }, function () {\n        console.log(this.state.selectedTank);\n      });\n\n      if (_this.state.progressVal === 0) {\n        _this.setState({\n          progressVal: _this.state.progressVal + 0.15\n        });\n      }\n    };\n\n    _this.setSelectedType = function (event, index) {\n      _this.setState({\n        selectedType: _this.state.mateTypes[index]\n      }, function () {\n        console.log(_this.state.selectedType);\n      });\n\n      if (_this.state.progressVal < 0.3) {\n        _this.setState({\n          progressVal: _this.state.progressVal + 0.15\n        });\n      }\n    };\n\n    _this.setName = function (mateName) {\n      if (_this.state.mateName === \"\") {\n        _this.setState({\n          progressVal: _this.state.progressVal + 0.15\n        });\n      }\n\n      _this.setState({\n        mateName: mateName\n      }, function () {\n        console.log(_this.state.mateName);\n      });\n    };\n\n    _this.setSpecies = function (species) {\n      _this.setState({\n        species: species\n      }, function () {\n        console.log(_this.state.species);\n      });\n    };\n\n    _this.setSelection = function () {\n      if (_this.state.reminderSelected === false) {\n        _this.setState({\n          reminderSelected: true\n        });\n      } else {\n        _this.setState({\n          reminderSelected: false\n        });\n      }\n    };\n\n    _this.createTankMate = function () {\n      var postData = {\n        tankId: _this.state.selectedTank,\n        type: _this.state.selectedType,\n        name: _this.state.mateName,\n        species: _this.state.species,\n        reminder: _this.state.reminderSelected\n      };\n      console.log(postData);\n    };\n\n    _this.state = {\n      selectedTank: 1,\n      tankOptions: [{\n        id: 1,\n        name: \"Tank 1\"\n      }, {\n        id: 2,\n        name: \"Tank 2\"\n      }, {\n        id: 3,\n        name: \"Tank 3\"\n      }],\n      mateTypes: [\"Plant\", \"Fish\", \"Amphibian\", \"Invertebrate\"],\n      selectedType: \"\",\n      mateName: \"\",\n      species: \"\",\n      reminderSelected: false\n    };\n    return _this;\n  }\n\n  _createClass(AddTankMate, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(SafeAreaView, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 13\n        }\n      }, React.createElement(ScrollView, {\n        style: styles.scrollView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 15\n        }\n      }, React.createElement(View, {\n        style: {\n          flex: 1,\n          backgroundColor: \"red\",\n          alignItems: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 17\n        }\n      }, React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 21\n        }\n      }, \"Step 1:\"), React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 21\n        }\n      }, \"Choose a tank to add to\"), React.createElement(Dropdown, {\n        selectedItem: this.state.selectedTank,\n        setSelectedValue: this.setSelectedTank,\n        itemOptions: this.state.tankOptions,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }\n      })), React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 17\n        }\n      }, React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 21\n        }\n      }, \"Step 2:\"), React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 21\n        }\n      }, \"Choose the type of mate\"), this.state.mateTypes.map(function (elem, index) {\n        return React.createElement(Button, {\n          onPress: function onPress(event) {\n            return _this2.setSelectedType(event, index);\n          },\n          buttonStyle: styles.button,\n          activeOpacity: .5,\n          title: elem,\n          type: \"solid\",\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 29\n          }\n        });\n      })), React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 17\n        }\n      }, React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 21\n        }\n      }, \"Step 3:\"), React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 21\n        }\n      }, \"Upload a photo (optional)\")), React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 17\n        }\n      }, React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 21\n        }\n      }, \"Step 4:\"), React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 21\n        }\n      }, \"Tell us a little bit about them\"), React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 21\n        }\n      }, \"Name\"), React.createElement(UserInput, {\n        text: this.state.mateName,\n        onChangeText: this.setName,\n        placeholder: \"Chowdie\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 21\n        }\n      }), React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 21\n        }\n      }, \"Species\"), React.createElement(UserInput, {\n        text: this.state.species,\n        onChangeText: this.setSpecies,\n        placeholder: \"Gold Fish\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 21\n        }\n      })), React.createElement(View, {\n        style: styles.checkboxContainer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 17\n        }\n      }, React.createElement(CheckBox, {\n        value: this.state.reminderSelected,\n        onValueChange: this.setSelection,\n        style: styles.checkbox,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 21\n        }\n      }), React.createElement(Text, {\n        style: styles.label,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 21\n        }\n      }, \"Add Reminder\")), React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 17\n        }\n      }, this.state.reminderSelected && React.createElement(AddReminder, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 21\n        }\n      })), React.createElement(Bttn, {\n        text: \"Create Mate\",\n        onPress: this.createTankMate,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 17\n        }\n      })));\n    }\n  }]);\n\n  return AddTankMate;\n}(Component);\n\nexport default AddTankMate;","map":{"version":3,"sources":["/Users/morganwong/my-projects/tank-m8s/screens/AddTankMate.js"],"names":["React","Component","Button","LinearProgress","Dropdown","UserInput","AddReminder","Bttn","styles","StyleSheet","create","container","flex","backgroundColor","justifyContent","marginVertical","flexDirection","scrollView","marginHorizontal","button","padding","borderRadius","marginTop","width","checkboxContainer","marginBottom","checkbox","alignSelf","label","margin","view","alignItems","AddTankMate","props","setSelectedTank","itemValue","itemIndex","setState","selectedTank","console","log","state","progressVal","setSelectedType","event","index","selectedType","mateTypes","setName","mateName","setSpecies","species","setSelection","reminderSelected","createTankMate","postData","tankId","type","name","reminder","tankOptions","id","map","elem"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { SafeAreaView, ScrollView, StyleSheet, Text, View, CheckBox } from 'react-native';\nimport { Button, LinearProgress } from 'react-native-elements';\nimport Dropdown from \"../components/Dropdown\";\nimport UserInput from \"../components/UserInput\";\nimport AddReminder from \"../components/AddReminder\";\nimport Bttn from \"../components/Bttn\";\n\nconst styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      backgroundColor: 'gray',\n      justifyContent: 'center',\n      marginVertical: 20,\n      flexDirection: \"column\"\n    },\n    scrollView: {\n        marginHorizontal: 20,\n        backgroundColor: \"pink\",\n        // alignContent: \"center\",\n        // textAlign: \"center\"\n        flex: 1\n    },\n    button: {\n        backgroundColor: \"black\",\n        padding: 20,\n        borderRadius: 10,\n        marginTop: \"1rem\",\n        width: 100\n    },\n    checkboxContainer: {\n        flexDirection: \"row\",\n        marginBottom: 20,\n    },\n    checkbox: {\n        alignSelf: \"center\",\n    },\n    label: {\n        margin: 8,\n    },\n    view: {\n        flex: 1,\n        alignItems: \"center\"\n    }\n   \n});\n\nclass AddTankMate extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            selectedTank: 1,\n            tankOptions: [ {id: 1, name: \"Tank 1\"}, {id: 2, name: \"Tank 2\"}, {id: 3, name: \"Tank 3\"} ],\n            mateTypes: [\"Plant\", \"Fish\", \"Amphibian\", \"Invertebrate\"],\n            selectedType: \"\",\n            mateName: \"\",\n            species: \"\",\n            reminderSelected: false\n        }\n    }\n\n    setSelectedTank = (itemValue, itemIndex) => {\n        this.setState({\n            selectedTank: itemValue\n        }, function() {\n            console.log(this.state.selectedTank)\n        })\n        if (this.state.progressVal === 0) {\n            this.setState({\n                progressVal: this.state.progressVal+0.15\n            })\n        }\n        \n    }\n\n    setSelectedType = (event, index) => {\n        this.setState({\n            selectedType: this.state.mateTypes[index]\n        }, () => {\n            console.log(this.state.selectedType)\n        })\n        if (this.state.progressVal < 0.3) {\n            this.setState({\n                progressVal: this.state.progressVal+0.15\n            })\n        }\n    }\n\n    setName = (mateName) => {\n        if (this.state.mateName === \"\") {\n            this.setState({\n                progressVal: this.state.progressVal+0.15\n            })\n        }\n        this.setState({\n            mateName: mateName\n        }, () => {\n            console.log(this.state.mateName)\n        })\n    }\n\n    setSpecies = (species) => {\n        this.setState({\n            species: species\n        }, () => {\n            console.log(this.state.species)\n        })\n    }\n\n    setSelection = () => {\n        if (this.state.reminderSelected === false) {\n            this.setState({\n                reminderSelected: true\n            })\n        }\n        else {\n            this.setState({\n                reminderSelected: false\n            })\n        }\n        \n    }\n    \n    createTankMate = () => {\n        var postData = {\n            tankId: this.state.selectedTank,\n            type: this.state.selectedType,\n            name: this.state.mateName,\n            species: this.state.species,\n            reminder: this.state.reminderSelected\n        }\n        console.log(postData);\n    }\n\n    render() {\n        return (\n            <SafeAreaView style={styles.container}>\n              <ScrollView style={styles.scrollView}>\n                {/* <LinearProgress \n                    color=\"black\"\n                    value={this.state.progressVal}\n                    trackColor=\"white\"\n                    variant=\"determinate\"\n                /> */}\n                <View style={{ flex: 1, backgroundColor: \"red\", alignItems: \"center\"}}>\n                    <Text>Step 1:</Text>\n                    <Text>Choose a tank to add to</Text>\n\n                    <Dropdown\n                        selectedItem= {this.state.selectedTank}\n                        setSelectedValue= {this.setSelectedTank}\n                        itemOptions= {this.state.tankOptions}\n                    />\n                </View>\n\n                <View>\n                    <Text>Step 2:</Text>\n                    <Text>Choose the type of mate</Text>\n\n                    {this.state.mateTypes.map((elem, index) => {\n                        return (\n                            <Button\n                                onPress={event => this.setSelectedType(event, index)}\n                                buttonStyle={styles.button}\n                                activeOpacity={.5}\n                                title= {elem}\n                                type=\"solid\"\n                            />\n                        )\n                    })}\n                </View>\n\n                <View >\n                    <Text>Step 3:</Text>\n                    <Text>Upload a photo (optional)</Text>\n\n                    \n                </View>\n\n                <View>\n                    <Text>Step 4:</Text>\n                    <Text>Tell us a little bit about them</Text>\n                    \n                    <Text>Name</Text>\n                    <UserInput\n                        text= {this.state.mateName}\n                        onChangeText= {this.setName}\n                        placeholder= \"Chowdie\"\n                    />\n\n                    <Text>Species</Text>\n                    <UserInput \n                        text= {this.state.species}\n                        onChangeText= {this.setSpecies}\n                        placeholder= \"Gold Fish\"\n                    />\n                </View>\n\n                <View style={styles.checkboxContainer}>\n                    <CheckBox\n                        value={this.state.reminderSelected}\n                        onValueChange={this.setSelection}\n                        style={styles.checkbox}\n                    />\n                    \n                    <Text style={styles.label}>Add Reminder</Text>\n                </View>\n                <View>\n                    {this.state.reminderSelected && \n                    <AddReminder \n                    \n                    />}\n                </View>\n\n                <Bttn \n                    text= \"Create Mate\"\n                    onPress= {this.createTankMate}            \n                />\n\n              </ScrollView>\n            </SafeAreaView>\n        );\n    }\n}\n\nexport default AddTankMate;"]},"metadata":{},"sourceType":"module"}